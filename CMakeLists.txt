cmake_minimum_required(VERSION 2.8.4)
project(dg)


if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic -std=c++11 -g")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -g")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O2")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
    SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO")
    SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH:NO")
    if (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    endif()
endif()

message("CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
message("CMAKE_CXX_FLAGS are ${CMAKE_CXX_FLAGS}")
message("CMAKE_BUILD_TYPE is ${CMAKE_BUILD_TYPE}")

if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    message(FATAL_ERROR "Using cmake wont work for you")
endif()

set(SOURCE_DIR_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/libs)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

FILE(GLOB GRAPHICS_SOURCES ${SOURCE_DIR_ROOT}/rendering/*.cpp)
FILE(GLOB GRAPHICS_HEADERS ${SOURCE_DIR_ROOT}/rendering/*.h)

FILE(GLOB GRAPHICS_BACKEND_SOURCES ${SOURCE_DIR_ROOT}/rendering/backend/*.cpp)
FILE(GLOB GRAPHICS_BACKEND_HEADERS ${SOURCE_DIR_ROOT}/rendering/backend/*.h)
FILE(GLOB GRAPHICS_GL_BACKEND_SOURCES ${SOURCE_DIR_ROOT}/rendering/backend/GL/*.cpp)
FILE(GLOB GRAPHICS_GL_BACKEND_HEADERS ${SOURCE_DIR_ROOT}/rendering/backend/GL/*.h)
FILE(GLOB GRAPHICS_DX11_BACKEND_SOURCES ${SOURCE_DIR_ROOT}/rendering/backend/DX11/*.cpp)
FILE(GLOB GRAPHICS_DX11_BACKEND_HEADERS ${SOURCE_DIR_ROOT}/rendering/backend/DX11/*.h)

FILE(GLOB INPUT_SOURCES ${SOURCE_DIR_ROOT}/input/*.cpp)
FILE(GLOB INPUT_HEADERS ${SOURCE_DIR_ROOT}/input/*.h)

FILE(GLOB UTILITIES_SOURCES ${SOURCE_DIR_ROOT}/utilities/*.cpp)
FILE(GLOB UTILITIES_HEADERS ${SOURCE_DIR_ROOT}/utilities/*.h)
FILE(GLOB UTILITIES_WIN32_SOURCES ${SOURCE_DIR_ROOT}/utilities/win32/*.cpp)
FILE(GLOB UTILITIES_WIN32_HEADERS ${SOURCE_DIR_ROOT}/utilities/win32/*.h)
FILE(GLOB UTILITIES_OSX_SOURCES ${SOURCE_DIR_ROOT}/utilities/osx/*.cpp)
FILE(GLOB UTILITIES_OSX_HEADERS ${SOURCE_DIR_ROOT}/utilities/osx/*.h)

FILE(GLOB APP_SOURCES ${SOURCE_DIR_ROOT}/*.cpp)
FILE(GLOB APP_HEADERS ${SOURCE_DIR_ROOT}/*.h)

FILE(GLOB EXT_HEADERS ${SOURCE_DIR_ROOT}/ext/*.h)

FILE(GLOB UI_SOURCES ${SOURCE_DIR_ROOT}/ui/*.cpp)
FILE(GLOB UI_HEADERS ${SOURCE_DIR_ROOT}/ui/*.h)

FILE(GLOB PLATFORM_SOURCES ${SOURCE_DIR_ROOT}/platform/*.cpp)
FILE(GLOB PLATFORM_HEADERS ${SOURCE_DIR_ROOT}/platform/*.h)

FILE(GLOB PLATFORM_SDL_SOURCES ${SOURCE_DIR_ROOT}/platform/SDL/*.cpp)
FILE(GLOB PLATFORM_SDL_HEADERS ${SOURCE_DIR_ROOT}/platform/SDL/*.h)
FILE(GLOB PLATFORM_GLFW3_SOURCES ${SOURCE_DIR_ROOT}/platform/GLFW3/*.cpp)
FILE(GLOB PLATFORM_GLFW3_HEADERS ${SOURCE_DIR_ROOT}/platform/GLFW3/*.h)

find_package(OpenGL REQUIRED)
find_package(LIBNOISE REQUIRED)
find_package(SDL2 REQUIRED)
find_package(FreeType REQUIRED)

include_directories(
    ${SOURCE_DIR_ROOT}/ 
    ${SOURCE_DIR_ROOT}/rendering/
    ${SOURCE_DIR_ROOT}/rendering/backend/
    ${SOURCE_DIR_ROOT}/rendering/backend/GL
    ${SOURCE_DIR_ROOT}/rendering/
    ${SOURCE_DIR_ROOT}/utilities/
    ${SOURCE_DIR_ROOT}/utilities/win32
    ${SOURCE_DIR_ROOT}/utilities/osx
    ${SOURCE_DIR_ROOT}/platform/
    ${SOURCE_DIR_ROOT}/platform/SDL/
    ${SOURCE_DIR_ROOT}/input/
    ${SOURCE_DIR_ROOT}/ui/
    ${SOURCE_DIR_ROOT}/ext/
    /usr/local/include
    ${LIBNOISE_INCLUDE_DIRS} 
    ${SDL2_INCLUDE_DIR}
    ${FREETYPE_INCLUDE_DIRS}
)

set(LIBS
    ${OPENGL_LIBRARIES}
    ${LIBNOISE_LIBRARIES}
    ${SDL2_LIBRARY}
    ${FREETYPE_LIBRARIES}
)


# create application
add_executable(dg 
    ${SOURCE_DIR_ROOT}/main.cpp
    ${GRAPHICS_SOURCES}
    ${GRAPHICS_BACKEND_SOURCES} 
    ${GRAPHICS_GL_BACKEND_SOURCES} 
    ${INPUT_SOURCES}
    ${UTILITIES_SOURCES}
    ${UTILITIES_OSX_SOURCES}
    ${APP_SOURCES}
    ${PLATFORM_SOURCES}
    ${PLATFORM_SDL_SOURCES}
    ${UI_SOURCES}
)

target_link_libraries(dg ${LIBS})

# Source groups for correct organization in Xcode
source_group(\\ FILES ${SOURCE_DIR_ROOT}/main.cpp ${APP_SOURCES} ${APP_HEADERS})
source_group(input FILES ${INPUT_SOURCES} ${INPUT_HEADERS})
source_group(platform FILES ${PLATFORM_SOURCES} ${PLATFORM_HEADERS})
source_group(platform\\SDL FILES ${PLATFORM_SDL_SOURCES} ${PLATFORM_SDL_HEADERS})
source_group(platform\\GLFW3 FILES ${PLATFORM_GLFW3_SOURCES} ${PLATFORM_GLFW3_HEADERS})
source_group(utilities FILES ${UTILITIES_SOURCES} ${UTILITIES_HEADERS})
source_group(utilities\\win32 FILES ${UTILITIES_WIN32_SOURCES} ${UTILITIES_WIN32_HEADERS})
source_group(utilities\\osx FILES ${UTILITIES_OSX_SOURCES} ${UTILITIES_OSX_HEADERS})
source_group(ui FILES ${UI_SOURCES} ${UI_HEADERS})
source_group(ext FILES ${EXT_HEADERS})
source_group(rendering FILES ${GRAPHICS_SOURCES} ${GRAPHICS_HEADERS})
source_group(rendering\\backend FILES ${GRAPHICS_BACKEND_SOURCES} ${GRAPHICS_BACKEND_HEADERS})
source_group(rendering\\backend\\gl FILES ${GRAPHICS_GL_BACKEND_SOURCES} ${GRAPHICS_GL_BACKEND_HEADERS})
source_group(rendering\\backend\\dx11 FILES ${GRAPHICS_DX11_BACKEND_SOURCES} ${GRAPHICS_DX11_BACKEND_HEADERS})





